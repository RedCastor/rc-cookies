{"version":3,"sources":["rc-cookies.js"],"names":["angular","module","directive","$injector","$log","$parse","restrict","require","link","scope","elem","attrs","Ctrl","cookie_name","rcCookie","cookie_days","rcCookieDays","cookie_val","formCtrl","$cookies","has","get","getObject","e","initForm","value","fields","$eval","rcCookieFields","isObject","extend","getter","setter","assign","saveCookie","name","obj","days","isString","length","remove","exipre_options","date","Date","setTime","getTime","expires","toGMTString","path","putObject","on","form_name","form","$valid","filter","cookie","$filter","options","isUndefined","parseInt","put","cookie_value","window"],"mappings":"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","file":"rc-cookies.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    var module = angular.module('rcCookies', []);\n\n\n    module.directive('rcCookie', [\n        '$injector',\n        '$log',\n        '$parse',\n        function ($injector, $log, $parse) {\n            return {\n                restrict: \"A\",\n                require: ['?^form'],\n                link: function (scope, elem, attrs, Ctrl) {\n\n                    var cookie_name = attrs.rcCookie;\n                    var cookie_days = attrs.rcCookieDays || 7;\n                    var cookie_val = null;\n\n                    /**\n                     * Set the controllers for form\n                     */\n                    var formCtrl = Ctrl[0];\n\n                    //Use the current scope.\n                    //Only if attribute is set\n                    if (cookie_name && formCtrl) {\n\n                        var $cookies;\n\n                        //Inject cookies\n                        if ($injector.has('$cookies')) {\n                            $cookies = $injector.get('$cookies');\n\n                            try {\n                                cookie_val = $cookies.getObject(cookie_name);\n                            }\n                            catch (e) {\n                                cookie_val = $cookies.get(cookie_name);\n                            }\n\n                            if(!cookie_val) {\n                                cookie_val = null;\n                            }\n                        }\n\n\n                        /**\n                         * Set the model change from object.\n                         *\n                         * @param value\n                         */\n                        var initForm = function (value) {\n\n                            //Get fields form\n                            var fields = scope.$eval(attrs.rcCookieFields);\n\n                            if (angular.isObject(value) && angular.isObject(fields)) {\n                                angular.extend(fields, value);\n                            }\n                            else {\n                                fields = value;\n                            }\n\n                            var getter = $parse(attrs.rcCookieFields);\n                            var setter = getter.assign;\n                            setter(scope, fields);\n                        };\n\n\n                        /**\n                         * Save Cookie\n                         *\n                         * @param name\n                         * @param obj\n                         */\n                        var saveCookie = function (name, obj, days) {\n\n                            if (!$cookies || !angular.isObject(obj) || !angular.isString(name) || !name.length || days <= 0) {\n                                return false;\n                            }\n\n                            $cookies.remove(name);\n\n                            var exipre_options;\n                            var date = new Date();\n                            date.setTime(date.getTime()+( days * (24 * 60 * 60 * 1000) ));\n                            exipre_options = {\n                                expires: date.toGMTString(),\n                                path: '/'\n                            };\n\n                            $cookies.putObject(name, obj, exipre_options);\n                        };\n\n\n                        /**\n                         * Event Submit Form\n                         */\n                        elem.on('submit', function() {\n\n                            var fields = scope.$eval(attrs.rcCookieFields);\n                            var form_name = attrs.name;\n                            var form = scope.$eval(form_name);\n\n                            if (fields && (!form || form.$valid)) {\n                                saveCookie(cookie_name, fields, cookie_days);\n                            }\n                        });\n\n                        //Init Form\n                        initForm(cookie_val);\n                    }\n                }\n\n            };\n        }\n    ]);\n\n\n    module.filter('getCookie', ['$injector', function($injector) {\n\n        return function( name ) {\n\n            var cookie = null;\n\n            //Inject cookies\n            if (angular.isString(name) && name.length && $injector.has('$cookies')) {\n                var $cookies = $injector.get('$cookies');\n\n\n                try {\n                    cookie = $cookies.getObject(name);\n                }\n                catch (e) {\n                    cookie = $cookies.get(name);\n                }\n\n                if (!cookie) {\n                    cookie = null;\n                }\n            }\n\n            return cookie;\n        };\n    }]);\n\n\n    module.filter('setCookie', ['$injector', '$filter', '$log', function($injector, $filter, $log) {\n\n        return function( value, name, days, options ) {\n\n            days = angular.isUndefined(days) ? 0 : parseInt(days, 10);\n            options = angular.isObject(options) ? options : {};\n\n            //Inject cookies\n            if ( angular.isString(name) && name.length && $injector.has('$cookies') ) {\n\n                var $cookies = $injector.get('$cookies');\n\n                var exipre_options;\n                var date = new Date();\n                date.setTime(date.getTime()+( days * (24 * 60 * 60 * 1000) ));\n                exipre_options = {\n                    expires: date.toGMTString(),\n                    path: '/'\n                };\n\n                angular.extend(options, exipre_options);\n\n                $cookies.remove(name, options);\n\n                if (days) {\n                    if ( angular.isObject(value) ) {\n                        $cookies.putObject(name, value, options);\n                    }\n                    else {\n                        $cookies.put(name, value, options);\n                    }\n                }\n\n                var cookie_value = $filter('getCookie')(name);\n\n                if (!cookie_value) {\n                    return value;\n                }\n\n                return cookie_value;\n            }\n\n            return null;\n        };\n    }]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}